#!/bin/bash

# TODO: Doing
# 1. auto run script when bash is loaded

### function for options(a,r,l,s,h) #########

# add file path to manage list function
# param: $1=file name or file path
function addToManageList(){
    local absPath=`realpath $1`
    local already=`sed -n "\,$absPath,p" $TOORMHOME'.manage_list.dat'`
    if [ -e $absPath ] && [ -z $already ]; then
        echo "[TOORM: $absPath >> will be managed]"
        echo $absPath >> $TOORMHOME'.manage_list.dat'
    else
        echo '[TOORM: file not exist or already managed]'
    fi
}

# remove file path from manage list function
# param: $1=file name or file path
function removeFromManageList(){
    local absPath=`realpath $1`
    local already=`sed -n "\,$absPath,p" $TOORMHOME'.manage_list.dat'`
    if [ -e $absPath ] && [ -n $already ]; then
        echo "[TOORM: $absPath >> will be not managed]"
        sed -i "\,$absPath,d" $TOORMHOME'.manage_list.dat'
    else
        echo '[TOORM: file not exist or already not managed]'
    fi
}

# change configuration key LIMITDIFF value function
# param: $1=new limit difference value
function changeLimitDiff(){
    local key=LIMITDIFF
    local newLimit=$1
    echo "[TOORM: Key [$key] change $LIMITDIFF -> $newLimit]"
    sed -i "s/\($key *= *\).*/\1$newLimit/" ~/.toorm.cfg
}


# show limit difference and manage list function
function showManageList(){
    echo '[TOORM: LIMITDIFF]'
    echo "  > $LIMITDIFF"
    echo '[TOORM: manage_list]'
    for elem in $(cat $TOORMHOME'.manage_list.dat'); do
        echo "  > $elem"
    done
}

# show help page function
function showHelp(){
    echo "[h] was triggered"
}

### function for no option ##################

# get datetime in seconds function
# param: empty | $1=file location
# return: absolute seconds
function getDateInSeconds(){
    local input=$1
    if [ -z $input ]; then
        input=`date "+%Y%m%d"`
    else
        input=`date -r $input "+%Y%m%d"`
    fi
    echo `date -d $input "+%s"`
}

# get date is over(boolean) function
# param: $1=now date(sec), $2=element date(sec)
# return: 0=date over (0 is true case in shell script)
function isDateOver(){
    local diff="$((($1-$2)/(60*60*24)))"
    echo -n '(Diff: '$diff')] >> '
    if [ $diff -gt $LIMITDIFF ]; then
        echo 'OVER'
        return 0
    fi
    echo 'OK'
    return 1
}

# manage file with option function
# param: $1=file location, $2=option(r/e/n)
function manageFile(){
    local location=$1
    local option=$2
    if [ $option = 'r' ]; then
        echo "    * Move to .remove directory and Except from list"
        mv $location $TOORMHOME'.remove/'
        sed -i "\,$location,d" $TOORMHOME'.manage_list.dat'
    elif [ $option = 'e' ]; then
        echo "    * Does not manage this file anymore, Except from list"
        sed -i "\,$location,d" $TOORMHOME'.manage_list.dat'
    elif [ $option = 'n' ]; then
        echo "    * Do nothing this time, Manage next time"
    fi
    # remove file location from 'manage_list.dat'
}

# load config file
source ~/.toorm.cfg

# option handling
while getopts ":a:r:l:sh" opt; do
    case $opt in
    a)
        addToManageList $OPTARG
        exit 1
        ;;
    r)
        removeFromManageList $OPTARG
        exit 1
        ;;
    l)
        changeLimitDiff $OPTARG
        exit 1
        ;;
    s)
        showManageList
        exit 1
        ;;
    h)
        showHelp
        exit 1
        ;;
    \?)
        echo "[TOORM: invalid option ($OPTARG)]" >&2
        exit 1
        ;;
    :)
        echo "[TOORM: ($OPTARG) requires an argument]" >&2
        exit 1
        ;;
    esac
done

# no option
echo '#############################################'
echo '#                                           #'
echo '#   LLLLL    LLL     LLL    LLLL    L   L   #'
echo '#     L     L   L   L   L   L   L   LL LL   #'
echo '#     L     L   L   L   L   LLLL    L L L   #'
echo '#     L     L   L   L   L   L  L    L L L   #'
echo '#     L      LLL     LLL    L   L   L L L   #'
echo '#                                           #'
echo '#     - Version : 0.3.1                     #'
echo '#     - Author  : oh4851 (Hyeok Oh)         #'
echo '#                                           #'
echo '#############################################'$'\n'

# get Now date in seconds
nowD=$(getDateInSeconds)

echo '[TOORM: manage_list Reading...]'$'\n'
for elem in $(cat $TOORMHOME'.manage_list.dat'); do
    echo -n '[TOORM: '$elem' -- '

    # get Element create/modify date in seconds
    elemD=$(getDateInSeconds $elem)

    # check date over
    if isDateOver $nowD $elemD; then
        # choose, how to operating about time over file
        while :; do
            echo -n '  > Choose Remove(r) / ExceptList(e) / NextTime(n): '
            read option
            if [ -z $option ]; then
                echo '    * invalid input, please input [r], [e], [n]'
                continue
            fi
            if [ $option != 'r' ] && [ $option != 'e' ] && [ $option != 'n' ]; then
                echo '    * invalid input, please input [r], [e]. [n]'
            else
                manageFile $elem $option
                break
            fi
        done
    fi
done

echo ''
# remove files in ~/TOORM/remove/
echo '[TOORM: remove all files in ~/TOORM/.remove]'
ls -a --color=auto --show-control-chars $TOORMHOME'.remove/'
rm -rf $TOORMHOME'.remove/*'

echo $'\n''[TOORM: program end... good bye~]'

